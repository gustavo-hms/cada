local global = _G

local _ENV = {}

skip = {}

-- Adapters are functions that get values generated by the iterator and return values conforming with the following protocol:
-- * nil, meaning there are no more values and the iteration should stop;
-- * skip, meaning the current iteration's value should be skipped and a new value should be generated;
-- * a, b, ...: the values transformed by the adapter


local protoproducer = {}
protoproducer.__index = protoproducer

function protoproducer:__call()
	return self:next()
end

function protoproducer:apply(adapter)
	self.adapters[#self.adapters+1] = adapter
    return self
end

function protoproducer:consume(consumer)
	return consumer(self)
end

function protoproducer:map(fn) return self:apply(map(fn)) end

function protoproducer:filter(fn) return self:apply(filter(fn)) end

function protoproducer:takewhile(fn) return self:apply(takewhile(fn)) end

function protoproducer:tolist() return self:consume(tolist) end


-- Producers


local cowrap = global.coroutine.wrap
local yield = global.coroutine.yield

local function producer(next, invariant, initial)
	local iterable = {
		adapters = {},
	}

	iterable.next = cowrap(function(self)
		local adapters = self.adapters
		local number = #adapters

		for a, b, c, d, e in next, invariant, initial do
			for i = 1,number do
				a, b, c, d, e = adapters[i](a, b, c, d, e)
				if a == nil then return end
				if a == skip then break end
			end

			if a ~= skip then
				yield(a, b, c, d, e)
			end
		end
	end)

	return global.setmetatable(iterable, protoproducer), invariant, initial
end

function wrap(standard_producer)
	return function(...)
		return producer(standard_producer(...))
	end
end

ipairs = wrap(global.ipairs)

pairs = wrap(global.pairs)

list = function(t)
	return producer(ipairs(t)):map(function(_, v) return v end)
end


-- Adapters


function map(fn)
    return function(a, b, c, d, e)
		return fn(a, b, c, d, e)
    end
end

function filter(fn)
    return function(a, b, c, d, e)
		if fn(a, b, c, d, e) then return a, b, c, d, e end
		return skip
    end
end

function takewhile(fn)
    return function(a, b, c, d, e)
		if not fn(a, b, c, d, e) then return end
		return a, b, c, d, e
    end
end


-- Consumers


function tolist(iterator)
	local t = {}
	local i = 1

	for v in iterator do
		t[i] = v
		i = i+1
	end

	return t
end

return _ENV
